boolean success(String message) {
    currentBuild.result = 'SUCCESS'
    echo message
    return false;
}

boolean shouldRun() {
    String message = sh(label: 'Get Commit Message', script: 'git log -1 --pretty=%B', returnStdout: true).trim()

    if (message.matches('.*\\[skip ci].*')) {
        return success('[skip] commit message contains [skip ci]')
    } else if (env.BRANCH_NAME != 'master' && message.matches("^\\[release] 'v.*")) {
        return success('[skip] only build releases on the master branch')
    } else {
        return true
    }
}

void toolSh(String command) {
    container('java-buildtools') {
        sh command
    }
}
def REPORT_URL= "https://qa1.rogers.com/Digital-QE/"
pipeline {
    agent {
        kubernetes {
            yamlFile 'jenkins-agent.yml'
            defaultContainer 'tools'
            podRetention never()
        }
    }
    parameters {
		
		choice(name: 'Browser', choices: ['saucechrome', 'saucefirefox', 'sauceedge', 'saucesafari', 'sauceandroidchrome', 'sauceioschrome'], description: 'Test Browser')
        choice(name: 'Language', choices: ['en', 'fr'], description: 'Test Language')
        string(name: 'ThreadCount', defaultValue: "1", description: 'Number of parallel test sessions')
        choice(name: 'TunnelRequired', choices: ['No', 'Yes'], description: 'Is Sauce Tunnel required? Select No if AUT is public facing')
        choice(name: 'Device', choices: ['Desktop', 'Mobile','Tablet'], description: 'Device Type to execute test on')
        string(name: 'Groups', defaultValue: "Sanity", description: 'Groups names separated by comma')
        string(name: 'TestProfile', defaultValue: "TSCWF-Automation", description: 'Only used for reporting - has no impact on test runs')
        string(name: 'IndividualTests', defaultValue: "", description: "Individual tests to be passed as Test1 Test2 Test3 Test4 and so on ")

    }

    triggers {

        parameterizedCron(env.BRANCH_NAME == 'CER_676_ProductDetailsScriptsRefactoringToRunOnAllDevices' ?'''
                    # leave spaces where you want them around the parameters. They'll be trimmed.
                    # we let the build run with the default name

  		    		00 22 * * 4 %Browser=saucesafari;Language=en;Groups=ProductDetail;ThreadCount=1;TunnelRequired=Yes;Device=Desktop;TestProfile=TSCWF-Automation
                  	00 01 * * 5 %Browser=sauceandroidchrome;Language=en;Groups=ProductDetail;ThreadCount=1;TunnelRequired=Yes;Device=Mobile;TestProfile=TSCWF-Automation
                    30 23 * * 4 %Browser=sauceioschrome;Language=en;Groups=ProductDetail;ThreadCount=1;TunnelRequired=Yes;Device=Mobile;TestProfile=TSCWF-Automation
                    00 05 * * 5 %Browser=sauceandroidchrome;Language=en;Groups=ProductDetail;ThreadCount=1;TunnelRequired=Yes;Device=Tablet;TestProfile=TSCWF-Automation
                    00 02 * * 5 %Browser=sauceioschrome;Language=en;Groups=ProductDetail;ThreadCount=1;TunnelRequired=Yes;Device=Tablet;TestProfile=TSCWF-Automation

                ''':'')
    }

    environment {
        SAUCE_USERNAME = credentials('SAUCE_USERNAME')
        SAUCE_ACCESS_KEY = credentials('SAUCE_ACCESS_KEY')
        FTP_SERVER = credentials('FTP_SERVER')
        FTP_USERNAME = credentials('FTP_USERNAME')
        FTP_PASSWORD = credentials('FTP_PASSWORD')

    }
    stages {
        stage('Run CI?') {
            when { expression { shouldRun() } }
            stages {


                stage('Environment Variables') {
                    steps { sh 'env | sort' }
                }
                stage('Credentials') {
                    environment {
                        GITHUB_CREDENTIALS = credentials('github_daws_svc_account')
                        ARTIFACTORY_CREDENTIALS = credentials('artifactory_serv_svc_dawsdev')
                        SONARQUBE_TOKEN = credentials('sonarqube_serv_svc_dawsdev')
                    }
                    steps {

                        toolSh 'github-credentials.sh'
                        toolSh 'artifactory-credentials.sh'
                        toolSh 'sonarqube-credentials.sh'
                    }
                }


                stage('Regression Tests') {
                    steps {
                        script {
                            if(params.IndividualTests.isEmpty())
                                toolSh "gradle sauceTest -Ptest_browser=${params.Browser} -Ptest_language=${params.Language} -Ptest_groupName='${params.Groups}' -Ptest_threadCount=${params.ThreadCount} -PTunnelRequired='${params.TunnelRequired}' -Ptest_device='${params.Device}' -i --stacktrace"
                            else
                                toolSh "gradle sauceTest -Ptest_browser=${params.Browser} -Ptest_language=${params.Language} ${generateTestString(params.IndividualTests)} -Ptest_threadCount=${params.ThreadCount} -PTunnelRequired='${params.TunnelRequired}' -Ptest_device='${params.Device}' -i --stacktrace"

                        }
                    }
                    post {
                        always {
                            junit 'build/test-results/**/*.xml'
                            script {
                                def jobName = "${env.JOB_NAME}"
                                def buildTimeStamp = "${env.BUILD_TIMESTAMP}"
                                def testProfile = "${env.TestProfile}"
                                def destinationFolder=jobName.replaceAll("\\s+", "").replace("digital-qe/","") + "/" +testProfile+"/"+ buildTimeStamp.replaceAll("\\s+", "")+"/"
                                sh label: 'NS upload', script: """ 
                                netstorage-upload.sh /mnt/ns/nskey.pem ./report Digital-QE/
                                """
                                REPORT_URL="${REPORT_URL}"+"/report/"+destinationFolder+"/results.html"
				                echo "${REPORT_URL}"
                            }

                        }
                    }
                }


            }
        }
    }

    post {

        success {
            echo "${env.BUILD_URL} has result success"
            office365ConnectorSend message: "Finished ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${REPORT_URL}>)", webhookUrl: 'https://rcirogers.webhook.office.com/webhookb2/20720da8-55d3-4025-823a-09df093b9147@0ab4cbbf-4bc7-4826-b52c-a14fed5286b9/JenkinsCI/d5a515f252b8463b975068b9b4b9ba7f/583eef93-e4a3-4db9-93cf-b7e461edaf8a', status: "SUCCESS"
        }
        failure {
            echo "${env.BUILD_URL} has result fail"
            office365ConnectorSend message: "Finished ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${REPORT_URL}>)", webhookUrl: 'https://rcirogers.webhook.office.com/webhookb2/20720da8-55d3-4025-823a-09df093b9147@0ab4cbbf-4bc7-4826-b52c-a14fed5286b9/JenkinsCI/d5a515f252b8463b975068b9b4b9ba7f/583eef93-e4a3-4db9-93cf-b7e461edaf8a', status: "FAILURE"
        }
        unstable {
            echo "${env.BUILD_URL} is unstable"
            office365ConnectorSend message: "Finished ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${REPORT_URL}>)", webhookUrl: 'https://rcirogers.webhook.office.com/webhookb2/20720da8-55d3-4025-823a-09df093b9147@0ab4cbbf-4bc7-4826-b52c-a14fed5286b9/JenkinsCI/d5a515f252b8463b975068b9b4b9ba7f/583eef93-e4a3-4db9-93cf-b7e461edaf8a', status: "UNSTABLE"
        }
    }
}

String generateTestString(String tests) {
    tests =tests.trim();
    String[] strArray=tests.split(" ");
    String finalTestString="";
    for (int i=0;i<=strArray.length-1;i++){
        finalTestString=finalTestString+"--tests '"+strArray[i].replace(".java","")+"' ";
    }
    return finalTestString;
}
